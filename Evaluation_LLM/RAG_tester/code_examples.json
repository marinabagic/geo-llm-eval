[
  {
    "question": "Which land type (LC0_Desc) has the highest 'pH_H2O'?",
    "code": "import pandas as pd\ndf = pd.read_csv(\"LUCAS.csv\")\nresult = df.groupby('LC0_Desc')['pH_H2O'].mean().idxmax()\nprint(result)"
  },
  {
    "question": "Plot the average 'OC' for each land type (LC0_Desc). Save it as a png.",
    "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('LUCAS.csv')\ndf.groupby('LC0_Desc')['OC'].mean().plot(kind='bar')\nplt.savefig('plot.png')"
  },
  {
    "question": "Calculate the average pH for south EU.",
    "code": "import pandas as pd\ndf = pd.read_csv('LUCAS.csv')\nsouth_eu = ['PT', 'ES', 'IT', 'GR', 'MT', 'HR', 'SI', 'CY']\nsouth_eu_df = df[df['NUTS_0'].isin(south_eu)]\navg_ph = south_eu_df['pH_H2O'].mean()\nprint(avg_ph)"
  },
  {
    "question": "Calculate the average pH for Austria, from the mentioned csv.",
    "code": "import pandas as pd\ndata = pd.read_csv('LUCAS.csv')\naustria_pH = data[data['NUTS_0'] == 'AT']['pH_CaCl2'].mean()\nprint(austria_pH)"
  },
  {
    "question": "Calculate the max value of 'N' for Slovenia, from the mentioned csv.",
    "code": "import pandas as pd\ndata = pd.read_csv('LUCAS.csv')\nslovenia_data = data[data['NUTS_0'] == 'SI']\nmax_n_value = slovenia_data['N'].max()\nprint(max_n_value)"
  },
  {
    "question": "Calculate the summary statistics for all numerical columns in the dataset.",
    "code": "import pandas as pd\ndf = pd.read_csv('LUCAS.csv')\nsummary = df.describe()\nprint(summary)"
  },
  {
    "question": "Generate a correlation matrix of the dataset and visualize it using a heatmap.",
    "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('LUCAS.csv')\ncorr_matrix = df.corr()\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\nplt.title('Correlation Matrix')\nplt.show()"
  },
  {
    "question": "Plot the distribution of 'K' with a KDE overlay. Save it as a png.",
    "code": "import seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('LUCAS.csv')\nsns.histplot(df['K'], kde=True)\nplt.title('Distribution of K')\nplt.savefig('plot.png')"
  },
  {
    "question": "Calculate the average 'K' for rows where 'EC' is greater than 10.",
    "code": "import pandas as pd\ndf = pd.read_csv('LUCAS.csv')\ndf_filtered = df[df['EC'] > 10]\navg_K = df_filtered['K'].mean()\nprint(avg_K)"
  },
  {
    "question": "Find the sum of 'K' for each unique value in the 'LC0_Desc' column. Print the result.",
    "code": "import pandas as pd\ndf = pd.read_csv('LUCAS.csv')\nresult = df.groupby('LC0_Desc')['K'].sum()\nprint(result)"
  },
  {
    "question": "Is there a significant relationship between land type (LC0_Desc) and pH_H2O? Use chi square from scipy.",
    "code": "import pandas as pd\nfrom scipy.stats import chi2_contingency\n\ndf = pd.read_csv('LUCAS.csv')\ncontingency_table = pd.crosstab(df['LC0_Desc'], df['pH_H2O'])\nchi2, p, _, _ = chi2_contingency(contingency_table)\nprint(\"Chi2:\", chi2)\nprint(\"P-value:\", p)"
  },
  {
    "question": "Is there a significant difference between 'N' in Austria and France? Use ANOVA from scipy.",
    "code": "import pandas as pd\nfrom scipy.stats import f_oneway\n\nfile_path = 'LUCAS.csv'\ndf = pd.read_csv(file_path)\naustria_N = df[df['NUTS_0'] == 'AT']['N']\nfrance_N = df[df['NUTS_0'] == 'FR']['N']\nanova_result = f_oneway(austria_N.dropna(), france_N.dropna())\nprint(\"F-statistic:\", anova_result.statistic)\nprint(\"p-value:\", anova_result.pvalue)"
  },
  {
    "question": "Which parameter has the strongest correlation with EC among {pH_CaCl2, pH_H2O, OC, CaCO3, P, N, K}?",
    "code": "import pandas as pd\n\nfile_path = 'LUCAS.csv'\ndf = pd.read_csv(file_path)\nparameters = ['pH_CaCl2', 'pH_H2O', 'OC', 'CaCO3', 'P', 'N', 'K']\ncorrelations = df[parameters + ['EC']].corr()['EC'].drop('EC')\nstrongest_correlation = correlations.idxmax()\ncorrelation_value = correlations.max()\nprint(\"Parameter with the strongest correlation with EC:\", strongest_correlation)\nprint(\"Correlation value:\", correlation_value)"
  },
  {
    "question": "Perform a t-test to compare 'K' between Grassland and Cropland.",
    "code": "import pandas as pd\nfrom scipy.stats import ttest_ind\n\ndf = pd.read_csv('LUCAS.csv')\nGrassland = df[df['LC0_Desc'] == 'Grassland']['K']\nCropland = df[df['LC0_Desc'] == 'Cropland']['K']\nt_statistic, p_value = ttest_ind(Grassland, Cropland)\nprint(f\"T-statistic: {t_statistic}, p-value: {p_value}\")"
  },
  {
    "question": "Plot a linear regression analysis to see the relationship between 'pH_H2O' and 'K'.",
    "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndf = pd.read_csv('LUCAS.csv')\nX = df[['pH_H2O']].values\ny = df['K'].values\nmodel = LinearRegression()\nmodel.fit(X, y)\nprint(f\"Intercept: {model.intercept_}, Coefficient: {model.coef_[0]}\")\nsns.scatterplot(x='pH_H2O', y='K', data=df)\nplt.plot(df['pH_H2O'], model.predict(X), color='red')\nplt.title('Linear Regression: pH_H2O vs K')\nplt.savefig('linreg.png')"
  },
  {
    "question": "Construct a 95% confidence interval for the mean 'OC' content in the dataset.",
    "code": "import pandas as pd\nimport scipy.stats as stats\nimport numpy as np\n\ndf = pd.read_csv('LUCAS.csv')\nmean_oc = df['OC'].mean()\nsem_oc = stats.sem(df['OC'], nan_policy='omit')\nconfidence_interval = stats.t.interval(0.95, len(df['OC'].dropna()) - 1, loc=mean_oc, scale=sem_oc)\nprint(\"95% Confidence Interval for mean 'OC':\", confidence_interval)"
  },
  {
    "question": "Using the Central Limit Theorem, simulate the sampling distribution of the mean 'pH_H2O' for sample sizes of 30. Plot the distribution and compare it to the normal distribution.",
    "code": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv('LUCAS.csv')\nsample_size = 30\nn_simulations = 1000\nsample_means = [df['pH_H2O'].sample(sample_size, replace=True).mean() for _ in range(n_simulations)]\nsns.histplot(sample_means, kde=True, stat='density', color='blue', label='Sample Means')\nsns.kdeplot(np.random.normal(np.mean(sample_means), np.std(sample_means), n_simulations), color='red', label='Normal Distribution')\nplt.xlabel('Mean pH_H2O')\nplt.ylabel('Density')\nplt.title('Sampling Distribution of the Mean pH_H2O')\nplt.legend()\nplt.savefig('plot.png')"
  },
  {
    "question": "Calculate the z-scores for 'EC' and identify any outliers (z-score > 3 or < -3).",
    "code": "import pandas as pd\nimport scipy.stats as stats\n\ndf = pd.read_csv('LUCAS.csv')\ndf['EC_zscore'] = stats.zscore(df['EC'], nan_policy='omit')\noutliers = df[(df['EC_zscore'] > 3) | (df['EC_zscore'] < -3)]\nprint(outliers[['POINTID', 'EC', 'EC_zscore']])"
  },
  {
    "question": "Perform a hypothesis test to determine if the mean 'K' content in the entire dataset is significantly different from 2%. Use a t-test for the hypothesis test.",
    "code": "import pandas as pd\nimport scipy.stats as stats\n\ndf = pd.read_csv('LUCAS.csv')\nt_stat, p_value = stats.ttest_1samp(df['K'].dropna(), 2)\nprint(\"T-statistic:\", t_stat)\nprint(\"P-value:\", p_value)"
  },
  {
    "question": "Calculate the p-value for the correlation between 'P' and 'K'. Determine if the correlation is statistically significant.",
    "code": "import pandas as pd\nimport scipy.stats as stats\n\ndf = pd.read_csv('LUCAS.csv')\ncorrelation_coefficient, p_value = stats.pearsonr(df['P'], df['K'])\nprint(p_value)"
  },
  {
    "question": "Plot all the points that have pH_CaCl2 > 6. Use geopandas. Save the image as a png.",
    "code": "import geopandas as gpd\nimport matplotlib.pyplot as plt\ngeo_df_path = 'geo_df.gpkg'\ngeo_df = gpd.read_file(geo_df_path)\neurope_shapefile_path = 'europe.gpkg'\neurope_shapefile = gpd.read_file(europe_shapefile_path)\nfiltered_geo_df = geo_df[geo_df['pH_CaCl2'] > 6]\nfig, ax = plt.subplots(figsize=(10, 10))\neurope_shapefile.plot(ax=ax, color='lightgrey')\nfiltered_geo_df.plot(ax=ax, marker='.', color='blue', markersize=5)\nplt.savefig('plot.png')"
  },
  {
    "question": "Plot all the points with LC0_Desc=Woodland in Europe. Save the result as a png. Use geopandas.",
    "code": "import geopandas as gpd\nimport matplotlib.pyplot as plt\ngeo_df_path = 'geo_df.gpkg'\ngeo_df = gpd.read_file(geo_df_path)\neurope_shapefile_path = 'europe.gpkg'\neurope_shapefile = gpd.read_file(europe_shapefile_path)\nwoodland_geo_df = geo_df[geo_df['LC0_Desc'] == 'Woodland']\nfig, ax = plt.subplots(figsize=(10, 10))\neurope_shapefile.plot(ax=ax, color='lightgrey')\nwoodland_geo_df.plot(ax=ax, marker='.', color='green', markersize=5)\nplt.savefig('plot.png')"
  },
  {
    "question": "Plot all the points with LC0_Desc=Woodland & pH<6 in Europe. Save the result as a png. Use geopandas.",
    "code": "import geopandas as gpd\nimport matplotlib.pyplot as plt\ngeo_df_path = 'geo_df.gpkg'\ngeo_df = gpd.read_file(geo_df_path)\neurope_shapefile_path = 'europe.gpkg'\neurope_shapefile = gpd.read_file(europe_shapefile_path)\nfiltered_geo_df = geo_df[(geo_df['LC0_Desc'] == 'Woodland') & (geo_df['pH_CaCl2'] < 6)]\nfig, ax = plt.subplots(figsize=(10, 10))\neurope_shapefile.plot(ax=ax, color='lightgrey')\nfiltered_geo_df.plot(ax=ax, marker='.', color='green', markersize=5)\nplt.savefig('woodland ph6.png')"
  },
  {
    "question": "Perform KMeans clustering on the TH_LAT and TH_LONG data to identify 3 clusters and plot them on a map. Save it as a png.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\ngdf = gpd.read_file('geo_df.gpkg')\nkmeans = KMeans(n_clusters=3)\ngdf['cluster'] = kmeans.fit_predict(gdf[['TH_LAT', 'TH_LONG']])\nplt.figure(figsize=(10, 10))\nbase = gpd.read_file('europe.gpkg')\nbase.plot(ax=plt.gca(), color='white', edgecolor='black')\ngdf.plot(ax=plt.gca(), marker='.', column='cluster', cmap='viridis', legend=True)\nplt.title('KMeans Clustering of GeoDataFrame')\nplt.savefig('clusters.png')"
  },
  {
    "question": "Create a map with markers for all locations where 'K' is above its median value, in Europe. Use geopandas. Save the result as a png.",
    "code": "import geopandas as gpd\nimport pandas as pd\nimport matplotlib.pyplot as plt\ngeo_df = gpd.read_file('geo_df.gpkg')\neurope_df = gpd.read_file('europe.gpkg')\nmedian_k = geo_df['K'].median()\nlocations = geo_df[geo_df['K'] > median_k]\nfig, ax = plt.subplots(figsize=(10, 10))\neurope_df.plot(ax=ax, color='gray')\nlocations.plot(ax=ax, marker='.', color='red')\nplt.savefig('plot.png')"
  },
  {
    "question": "Generate a heatmap where each point is weighted by 'pH_CaCl2', in Europe. Don't merge these shapefiles just plot them. Use geopandas. Save the result as a png.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\ngdf = gpd.read_file('geo_df.gpkg')\neurope_shapefile = gpd.read_file('europe.gpkg')\nfig, ax = plt.subplots(figsize=(10, 10))\neurope_shapefile.plot(ax=ax, color='white', edgecolor='black')\ngdf.plot(ax=ax, marker='.', column='pH_CaCl2', cmap='hot', legend=True, markersize=gdf['pH_CaCl2'])\nplt.title('Heatmap of pH_CaCl2 in Europe')\nplt.savefig('plot.png')"
  },
  {
    "question": "Create a map with markers for points where 'K' is in the top 10 percentile, in Europe. Don't merge these shapefiles just plot them. Use geopandas. Save the result as a png.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\ngdf = gpd.read_file('geo_df.gpkg')\ntop_10_percentile = gdf['K'].quantile(0.90)\ntop_k_points = gdf[gdf['K'] > top_10_percentile]\neurope_shapefile = gpd.read_file('europe.gpkg')\nfig, ax = plt.subplots(figsize=(10, 10))\neurope_shapefile.plot(ax=ax, color='gray', edgecolor='black')\ntop_k_points.plot(ax=ax, marker='.', color='red', markersize=5)\nplt.title('Top 10 Percentile of K Values in Europe')\nplt.savefig('plot.png')"
  },
  {
    "question": "Plot clusters of points with 'pH_H2O'>5 and 'pH_H2O'<5 in Europe.",
    "code": "import geopandas as gpd\nimport matplotlib.pyplot as plt\ngdf_points = gpd.read_file('geo_df.gpkg')\ngdf_europe = gpd.read_file('europe.gpkg')\nhigh_ph = gdf_points[gdf_points['pH_H2O'] > 5]\nlow_ph = gdf_points[gdf_points['pH_H2O'] < 5]\nfig, ax = plt.subplots(figsize=(10, 10))\ngdf_europe.plot(ax=ax, color='lightgrey', edgecolor='black')\nhigh_ph.plot(ax=ax, marker='.', color='blue', markersize=5, label='pH_H2O > 5')\nlow_ph.plot(ax=ax, marker='.', color='red', markersize=5, label='pH_H2O < 5')\nplt.legend()\nplt.title('Clusters of Points with pH_H2O > 5 and pH_H2O < 5 in Europe')\nplt.savefig('ph_h2o_clusters.png', dpi=300, bbox_inches='tight')"
  },
  {
    "question": "Create a map displaying the distribution of soil types ('LC0_Desc') across Europe. Each soil type should be represented by a different color. Use geopandas and save the map as a png.",
    "code": "import geopandas as gpd\nimport matplotlib.pyplot as plt\ndf = gpd.read_file('geo_df.gpkg')\neurope = gpd.read_file('europe.gpkg')\nfig, ax = plt.subplots(figsize=(10,10))\neurope.plot(ax=ax, color='lightblue', edgecolor='black')\ndf.plot(ax=ax, column='LC0_Desc', categorical=True, markersize=5, marker='.', legend=True)\nplt.savefig('soil_types_map.png')"
  },
  {
    "question": "Plot all the LC0_Desc='Grassland' and LC0_Desc='Woodland' points where 'OC'>20. Use geopandas and save the map as a png.",
    "code": "import geopandas as gpd\nimport matplotlib.pyplot as plt\ngeo_dataframe = gpd.read_file('geo_df.gpkg')\neurope_shapefile = gpd.read_file('europe.gpkg')\nfiltered_geo_dataframe = geo_dataframe[(geo_dataframe['LC0_Desc'] == 'Grassland') | (geo_dataframe['LC0_Desc'] == 'Woodland')]\nfiltered_geo_dataframe = filtered_geo_dataframe[filtered_geo_dataframe['OC'] > 20]\nfig, ax = plt.subplots(figsize=(10, 10))\neurope_shapefile.plot(ax=ax, color='gray')\nfiltered_geo_dataframe.plot(ax=ax, marker='.', color='red')\nplt.savefig('plot.png')"
  },
  {
    "question": "Plot all points in France where 'pH_CaCl2' > 6 and LC0_Desc is Woodland. Only show mainland France.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load and filter LUCAS data\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[(df[\"Country\"] == \"France\") & (df[\"pH_CaCl2\"] > 6) & (df[\"LC0_Desc\"] == \"Woodland\")]\n\n# Create GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.TH_LONG, df.TH_LAT), crs=\"EPSG:4326\")\n\n# Load France from 10m shapefile and isolate mainland\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\")\nfrance_full = world[world[\"NAME\"] == \"France\"].to_crs(\"EPSG:4326\")\nfrance_mainland = france_full.explode(index_parts=True).copy()\nfrance_mainland[\"area\"] = france_mainland.geometry.area\nfrance_mainland = france_mainland.sort_values(\"area\", ascending=False).head(1)\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8))\nfrance_mainland.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, color=\"blue\", markersize=5)\n\nplt.title(\"pH_CaCl2 > 6 in French Woodland (mainland only, high-res)\")\nplt.tight_layout()\nplt.savefig(\"case2_france_mainland_10mplot.png\")\nplt.show()"
  },
  {
    "question": "Plot all points with LC0_Desc = Woodland across Europe using accurate borders.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load and filter data\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"LC0_Desc\"] == \"Woodland\"]\n\n# GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.TH_LONG, df.TH_LAT), crs=\"EPSG:4326\")\n\n# Load high-res shapefile and filter to Europe only\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\neurope = world[world[\"CONTINENT\"] == \"Europe\"]\n\n# Compute bounding box of all European woodland points\nbbox = gdf[gdf[\"Country\"].isin(europe[\"NAME\"])].total_bounds\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 8))\neurope.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf[gdf[\"Country\"].isin(europe[\"NAME\"])].plot(ax=ax, color=\"green\", markersize=5, label=\"Woodland\")\n\n# Set tight limits around Europe only\nax.set_xlim(bbox[0], bbox[2])\nax.set_ylim(bbox[1], bbox[3])\n\nplt.title(\"Woodland Points in Europe (High-Res, Zoomed)\")\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"case3_woodland_europe_zoomedplot.png\")\nplt.show()"
  },
  {
    "question": "Perform KMeans clustering on TH_LAT and TH_LONG across Europe and plot the clusters with borders.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n\n# Load and filter LUCAS data\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"IsInEurope\"] == True]\ndf = df[[\"TH_LAT\", \"TH_LONG\"]].dropna()\ndf[\"TH_LAT\"] = pd.to_numeric(df[\"TH_LAT\"], errors=\"coerce\")\ndf[\"TH_LONG\"] = pd.to_numeric(df[\"TH_LONG\"], errors=\"coerce\")\ndf = df.dropna()\n\n# Run KMeans clustering\nkmeans = KMeans(n_clusters=3, random_state=0)\ndf[\"cluster\"] = kmeans.fit_predict(df[[\"TH_LAT\", \"TH_LONG\"]])\n\n# GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Load high-res Europe shape\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\")\neurope = world[world[\"CONTINENT\"] == \"Europe\"]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 8))\neurope.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, column=\"cluster\", cmap=\"tab10\", markersize=5, legend=True)\n\n# Zoom to bounding box of points\nbbox = gdf.total_bounds\nax.set_xlim(bbox[0], bbox[2])\nax.set_ylim(bbox[1], bbox[3])\n\nplt.title(\"KMeans Clustering on TH_LAT and TH_LONG (Europe)\")\nplt.tight_layout()\nplt.savefig(\"case8_kmeans_thlat_long_europeplot.png\")\nplt.show()"
  },
  {
    "question": "Plot locations in Denmark where 'K' and 'pH_H2O' are above the 75th percentile.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load and filter\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"Country\"] == \"Denmark\"]\ndf[\"K\"] = pd.to_numeric(df[\"K\"], errors=\"coerce\")\ndf[\"pH_H2O\"] = pd.to_numeric(df[\"pH_H2O\"], errors=\"coerce\")\ndf = df.dropna(subset=[\"K\", \"pH_H2O\", \"TH_LONG\", \"TH_LAT\"])\n\n# Thresholding\nk_thresh = df[\"K\"].quantile(0.75)\nph_thresh = df[\"pH_H2O\"].quantile(0.75)\ndf = df[(df[\"K\"] > k_thresh) & (df[\"pH_H2O\"] > ph_thresh)]\n\n# Convert to GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Denmark mainland shape\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\ndenmark = world[world[\"NAME\"] == \"Denmark\"].explode(index_parts=True)\ndenmark[\"area\"] = denmark.geometry.area\ndenmark_main = denmark[denmark[\"area\"] > 0.5]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8))\ndenmark_main.plot(ax=ax, facecolor=\"lightgrey\", edgecolor=\"black\", linewidth=1)\ngdf.plot(ax=ax, color=\"blue\", markersize=25)\n\n# Use full mainland bounds to frame everything\nax.set_xlim(denmark_main.total_bounds[0] - 0.2, denmark_main.total_bounds[2] + 0.2)\nax.set_ylim(denmark_main.total_bounds[1] - 0.2, denmark_main.total_bounds[3] + 0.2)\n\nax.set_title(\"K > 75th % and pH_H2O > 75th % in Denmark\")\nax.set_xlabel(\"Longitude\")\nax.set_ylabel(\"Latitude\")\nax.grid(True, linestyle=\"--\", alpha=0.4)\n\nplt.tight_layout()\nplt.savefig(\"plotplot.png\")\nplt.show()"
  },
  {
    "question": "Show land cover types in Germany using LU_DESC on a map.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load LUCAS data and filter for Germany\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"Country\"] == \"Germany\"]\n\n# Fallback for LU_DESC\nif \"LU_DESC\" not in df.columns and \"LC0_Desc\" in df.columns:\n    df[\"LU_DESC\"] = df[\"LC0_Desc\"]\n\n# Clean\ndf = df.dropna(subset=[\"LU_DESC\", \"TH_LAT\", \"TH_LONG\"])\n\n# GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Load high-res shapefile and extract Germany\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\ngermany = world[world[\"NAME\"] == \"Germany\"]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8))\ngermany.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, column=\"LU_DESC\", cmap=\"tab10\", markersize=5, legend=True)\n\nplt.title(\"Land Cover Categories in Germany\")\nplt.tight_layout()\nplt.savefig(\"case7_land_cover_germany_fixedplot.png\")\nplt.show()"
  },
  {
    "question": "Plot LC0_Desc categories across Spain using high-resolution borders.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load LUCAS dataset and filter for Spain\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"Country\"] == \"Spain\"]\n\n# Create GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Load high-resolution country borders and extract mainland Spain\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\")\nspain_shape = world[world[\"NAME\"] == \"Spain\"].to_crs(\"EPSG:4326\")\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8))\nspain_shape.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, column=\"LC0_Desc\", cmap=\"tab10\", markersize=5, legend=True)\nax.set_title(\"Land Cover Categories in Spain\")\nplt.tight_layout()\nplt.savefig(\"case11_land_cover_spainplot.png\")\nplt.show()"
  },
  {
    "question": "Plot all points in Europe with 'K' above median. Use only the European mainland.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load and filter data\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"K\"] = pd.to_numeric(df[\"K\"], errors=\"coerce\")\ndf = df[df[\"K\"].notna()]\ndf = df[df[\"TH_LONG\"].notna() & df[\"TH_LAT\"].notna()]\ndf = df[df[\"K\"] > df[\"K\"].median()]\n\n# Create GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Load high-res countries shapefile\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\neurope = world[world[\"CONTINENT\"] == \"Europe\"].explode(index_parts=True)\n\n# Optional: filter out small islands (keep large landmasses only)\neurope[\"area\"] = europe.geometry.area\neurope_mainland = europe[europe[\"area\"] > 1]  # Keep mainland\n\n# Plot\nfig, ax = plt.subplots(figsize=(9, 9))\neurope_mainland.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, color=\"blue\", markersize=5, label=\"K > median\")\n\n# Zoom to bounds of points\nax.set_xlim(gdf.total_bounds[0] - 1, gdf.total_bounds[2] + 1)\nax.set_ylim(gdf.total_bounds[1] - 1, gdf.total_bounds[3] + 1)\n\nplt.title(\"K > Median in Europe (Mainland Only, High-Res)\")\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"case12_k_above_median_europe_fixedplot.png\")\nplt.show()"
  },
  {
    "question": "Plot all points in Czechia where 'OC' is above the median and color by LU_DESC.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load LUCAS data and filter for Czechia\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"Country\"] == \"Czechia\"]\ndf[\"OC\"] = pd.to_numeric(df[\"OC\"], errors=\"coerce\")\n\n# Fallback to LC0_Desc if LU_DESC not found\nif \"LU_DESC\" not in df.columns and \"LC0_Desc\" in df.columns:\n    df[\"LU_DESC\"] = df[\"LC0_Desc\"]\n\n# Clean and filter\ndf = df.dropna(subset=[\"OC\", \"LU_DESC\", \"TH_LONG\", \"TH_LAT\"])\ndf = df[df[\"OC\"] > df[\"OC\"].median()]\n\n# Create GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Load high-res country shapefile\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\n\n# Try both possible names for Czechia\ncz_shape = world[world[\"NAME\"].isin([\"Czechia\", \"Czech Republic\"])]\nif cz_shape.empty:\n    raise ValueError(\"Czechia not found in shapefile. Please check country name in shapefile.\")\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8))\ncz_shape.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, column=\"LU_DESC\", cmap=\"tab10\", markersize=5, legend=True)\nax.set_title(\"OC > Median in Czechia (colored by LU_DESC)\")\nplt.tight_layout()\nplt.savefig(\"case6_czechia_oc_ludesc_fixedplot.png\")\nplt.show()"
  },
  {
    "question": "Plot points in Austria where 'K' > 90th percentile using THU/THUNUS coordinates.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load and filter data\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"Country\"] == \"Austria\"]\ndf[\"K\"] = pd.to_numeric(df[\"K\"], errors=\"coerce\")\n\n# Fallback logic for coordinates\nif \"THUNUS\" in df.columns and \"THU\" in df.columns:\n    df[\"X\"] = pd.to_numeric(df[\"THUNUS\"], errors=\"coerce\")\n    df[\"Y\"] = pd.to_numeric(df[\"THU\"], errors=\"coerce\")\nelse:\n    df[\"X\"] = pd.to_numeric(df[\"TH_LONG\"], errors=\"coerce\")\n    df[\"Y\"] = pd.to_numeric(df[\"TH_LAT\"], errors=\"coerce\")\n\n# Drop rows with missing values\ndf = df.dropna(subset=[\"X\", \"Y\", \"K\"])\n\n# Quantile filter\ndf = df[df[\"K\"] > df[\"K\"].quantile(0.9)]\n\n# GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"X\"], df[\"Y\"]), crs=\"EPSG:4326\")\n\n# Load Austria shape (high-res)\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\naustria = world[world[\"NAME\"] == \"Austria\"]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8))\naustria.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, color=\"blue\", markersize=5)\nplt.title(\"K > 90th Percentile in Austria\")\nplt.tight_layout()\nplt.savefig(\"case4_k_thunus_austria_fixedplot.png\")\nplt.show()"
  },
  {
    "question": "Perform KMeans clustering on OC and K in Poland and plot the clusters using borders.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n\n# Load and filter data\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"Country\"] == \"Poland\"]\ndf[\"OC\"] = pd.to_numeric(df[\"OC\"], errors=\"coerce\")\ndf[\"K\"] = pd.to_numeric(df[\"K\"], errors=\"coerce\")\ndf = df.dropna(subset=[\"OC\", \"K\", \"TH_LONG\", \"TH_LAT\"])\n\n# KMeans clustering\nkmeans = KMeans(n_clusters=5, random_state=0)\ndf[\"Cluster\"] = kmeans.fit_predict(df[[\"OC\", \"K\"]])\n\n# GeoDataFrame for points\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Load high-res world and get Poland\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\")\npoland = world[world[\"NAME\"] == \"Poland\"]\n\n# Plot\nfig, ax = plt.subplots(figsize=(8, 8))\npoland.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, column=\"Cluster\", cmap=\"tab10\", markersize=5, legend=True)\n\n# Zoom to Poland\u2019s polygon bounds\nax.set_xlim(*poland.total_bounds[[0, 2]])\nax.set_ylim(*poland.total_bounds[[1, 3]])\n\nplt.title(\"KMeans Clustering on OC and K in Poland\")\nplt.tight_layout()\nplt.savefig(\"case9_kmeans_oc_k_poland_finalplot.png\")\nplt.show()"
  },
  {
    "question": "Plot all points in Europe with 'pH_H2O' > 5 in blue, others in red, using full continent map.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load and prepare data\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"pH_H2O\"] = pd.to_numeric(df[\"pH_H2O\"], errors=\"coerce\")\ndf = df.dropna(subset=[\"pH_H2O\", \"TH_LAT\", \"TH_LONG\"])\n\n# GeodataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Load high-res country borders and clip to Europe\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\")\neurope = world[world[\"CONTINENT\"] == \"Europe\"]\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 10))\neurope.plot(ax=ax, color=\"white\", edgecolor=\"black\")\n\ngdf[gdf[\"pH_H2O\"] > 5].plot(ax=ax, color=\"blue\", markersize=5, label=\"pH_H2O > 5\")\ngdf[gdf[\"pH_H2O\"] <= 5].plot(ax=ax, color=\"red\", markersize=5, label=\"pH_H2O \u2264 5\")\n\nplt.title(\"pH_H2O > 5 in Blue, Others in Red (Europe)\")\nplt.legend()\nplt.xlim(-10, 30)\nplt.ylim(35, 72)\nplt.tight_layout()\nplt.savefig(\"case10_phh2o_red_blue_europeplot.png\")\nplt.show()"
  },
  {
    "question": "Create a map showing soil pH_CaCl2 across Europe using a continuous colormap.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load data\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df.dropna(subset=[\"pH_CaCl2\", \"TH_LAT\", \"TH_LONG\"])\n\n# Create GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Load European borders\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\neurope = world[world[\"CONTINENT\"] == \"Europe\"]\n\n# Get bounding box\nbbox = gdf[gdf[\"Country\"].isin(europe[\"NAME\"])].total_bounds\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 8))\neurope.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf[gdf[\"Country\"].isin(europe[\"NAME\"])].plot(ax=ax, column=\"pH_CaCl2\", cmap=\"viridis\", markersize=5, legend=True)\n\nax.set_xlim(bbox[0], bbox[2])\nax.set_ylim(bbox[1], bbox[3])\nax.set_title(\"Soil pH (CaCl2) Colored by Value Across Europe\")\nplt.tight_layout()\nplt.savefig(\"plot.png\")\nplt.show()"
  },
  {
    "question": "Plot all points in Germany colored by NUTS_2 region, ensuring the legend fits even with many categories.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load and filter data\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[(df[\"Country\"] == \"Germany\") & df[\"NUTS_2\"].notna()]\n\n# Convert to GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n# Load high-res Germany shape\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\ngermany = world[world[\"NAME\"] == \"Germany\"]\n\n# Unique NUTS_2 codes and color map\nnuts2_codes = gdf[\"NUTS_2\"].unique()\ncolors = plt.cm.tab20.colors * ((len(nuts2_codes) // 20) + 1)\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 10))\ngermany.plot(ax=ax, color=\"white\", edgecolor=\"black\")\n\nfor i, code in enumerate(nuts2_codes):\n    subset = gdf[gdf[\"NUTS_2\"] == code]\n    subset.plot(ax=ax, color=colors[i], markersize=5, label=code)\n\n# Custom legend outside\nax.legend(title=\"NUTS_2 Region\", bbox_to_anchor=(1.05, 1), loc=\"upper left\", fontsize=\"small\")\nax.set_title(\"Points in Germany by NUTS_2 Region\")\nplt.tight_layout()\nplt.savefig(\"plot.png\", bbox_inches=\"tight\", dpi=300)\nplt.show()"
  },
  {
    "question": "Map locations in Portugal where 'OC' is above the median and LU_DESC is 'Artificial land'.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"OC\"] = pd.to_numeric(df[\"OC\"], errors=\"coerce\")\nif \"LU_DESC\" not in df.columns and \"LC0_Desc\" in df.columns:\n    df[\"LU_DESC\"] = df[\"LC0_Desc\"]\ndf = df[(df[\"Country\"] == \"Portugal\") & (df[\"OC\"] > df[\"OC\"].median()) & (df[\"LU_DESC\"] == \"Artificial land\")]\ndf = df.dropna(subset=[\"TH_LONG\", \"TH_LAT\"])\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\nportugal = world[world[\"NAME\"] == \"Portugal\"].explode(index_parts=True)\nportugal[\"area\"] = portugal.geometry.area\nmainland = portugal.sort_values(\"area\", ascending=False).head(1)\n\nfig, ax = plt.subplots(figsize=(8, 8))\nmainland.plot(ax=ax, color=\"white\", edgecolor=\"black\")\n\nif not gdf.empty:\n    gdf.plot(ax=ax, color=\"red\", markersize=25)\n    ax.set_xlim(mainland.total_bounds[0] - 0.5, mainland.total_bounds[2] + 0.5)\n    ax.set_ylim(mainland.total_bounds[1] - 0.5, mainland.total_bounds[3] + 0.5)\n    ax.set_title(\"OC > Median & LU_DESC = Artificial land (Mainland Portugal)\")\nelse:\n    ax.set_title(\"No valid data for OC > Median & Artificial land in Portugal\")\n\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Show all woodland areas in Finland with OC below its national median.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"OC\"] = pd.to_numeric(df[\"OC\"], errors=\"coerce\")\nif \"LC0_Desc\" not in df.columns and \"LandCover\" in df.columns:\n    df[\"LC0_Desc\"] = df[\"LandCover\"]\ndf = df[df[\"Country\"] == \"Finland\"]\nmedian_oc = df[\"OC\"].median()\ndf = df[(df[\"OC\"] < median_oc) & (df[\"LC0_Desc\"] == \"Woodland\")]\ndf = df.dropna(subset=[\"TH_LAT\", \"TH_LONG\"])\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\nfinland = world[world[\"NAME\"] == \"Finland\"].explode(index_parts=True)\nfinland[\"area\"] = finland.geometry.area\nmainland = finland.sort_values(\"area\", ascending=False).head(1)\n\nfig, ax = plt.subplots(figsize=(9, 9))\nmainland.plot(ax=ax, color=\"white\", edgecolor=\"black\")\nif not gdf.empty:\n    gdf.plot(ax=ax, color=\"green\", markersize=5)\n    ax.set_xlim(mainland.total_bounds[0] - 0.5, mainland.total_bounds[2] + 0.5)\n    ax.set_ylim(mainland.total_bounds[1] - 0.5, mainland.total_bounds[3] + 0.5)\n    ax.set_title(\"Woodland in Finland with OC < National Median\")\nelse:\n    ax.set_title(\"No Woodland Points in Finland with OC < National Median\")\n\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Visualize all locations in Ireland where 'pH_CaCl2' is greater than 6 and LC1_Desc is 'Cropland'.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"pH_CaCl2\"] = pd.to_numeric(df[\"pH_CaCl2\"], errors=\"coerce\")\nif \"LC0_Desc\" not in df.columns and \"LC1_Desc\" in df.columns:\n    df[\"LC0_Desc\"] = df[\"LC1_Desc\"]\ndf = df[(df[\"Country\"] == \"Ireland\") & (df[\"pH_CaCl2\"] > 6) & (df[\"LC0_Desc\"] == \"Cropland\")]\ndf = df.dropna(subset=[\"TH_LAT\", \"TH_LONG\"])\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\nireland = world[world[\"NAME\"] == \"Ireland\"].explode(index_parts=True)\nireland[\"area\"] = ireland.geometry.area\nmainland = ireland.sort_values(\"area\", ascending=False).head(1)\n\nfig, ax = plt.subplots(figsize=(8, 8))\nmainland.plot(ax=ax, color=\"white\", edgecolor=\"black\")\nif not gdf.empty:\n    gdf.plot(ax=ax, color=\"blue\", markersize=5)\n    ax.set_xlim(mainland.total_bounds[0] - 0.5, mainland.total_bounds[2] + 0.5)\n    ax.set_ylim(mainland.total_bounds[1] - 0.5, mainland.total_bounds[3] + 0.5)\n    ax.set_title(\"pH_CaCl2 > 6 in Irish Croplands\")\nelse:\n    ax.set_title(\"No matching data for Ireland (pH_CaCl2 > 6 & Cropland)\")\n\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Display a map of European points with OC above 40 and K above 250.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"OC\"] = pd.to_numeric(df[\"OC\"], errors=\"coerce\")\ndf[\"K\"] = pd.to_numeric(df[\"K\"], errors=\"coerce\")\ndf = df[(df[\"OC\"] > 40) & (df[\"K\"] > 250)]\ndf = df.dropna(subset=[\"TH_LAT\", \"TH_LONG\", \"OC\", \"K\"])\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\neurope = world[world[\"CONTINENT\"] == \"Europe\"].explode(index_parts=True)\neurope[\"area\"] = europe.geometry.area\neurope_main = europe[europe[\"area\"] > 1]\n\nvalid_countries = europe_main[\"NAME\"].unique()\ngdf = gdf[gdf[\"Country\"].isin(valid_countries)]\n\nfig, ax = plt.subplots(figsize=(10, 8))\neurope_main.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, color=\"red\", markersize=5)\nbbox = gdf.total_bounds\nax.set_xlim(bbox[0] - 1, bbox[2] + 1)\nax.set_ylim(bbox[1] - 1, bbox[3] + 1)\nax.set_title(\"European Points with OC > 40 and K > 250\")\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Plot all samples in the Netherlands where both pH_H2O and OC are above their medians.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"Country\"] == \"Netherlands\"]\ndf[\"pH_H2O\"] = pd.to_numeric(df[\"pH_H2O\"], errors=\"coerce\")\ndf[\"OC\"] = pd.to_numeric(df[\"OC\"], errors=\"coerce\")\ndf = df.dropna(subset=[\"pH_H2O\", \"OC\", \"TH_LONG\", \"TH_LAT\"])\nph_median = df[\"pH_H2O\"].median()\noc_median = df[\"OC\"].median()\ndf = df[(df[\"pH_H2O\"] > ph_median) & (df[\"OC\"] > oc_median)]\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\nnetherlands = world[world[\"NAME\"] == \"Netherlands\"].explode(index_parts=True)\nnetherlands[\"area\"] = netherlands.geometry.area\nnetherlands_main = netherlands[netherlands[\"area\"] > 0.1]\n\nfig, ax = plt.subplots(figsize=(8, 8))\nnetherlands_main.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, color=\"green\", markersize=10)\nax.set_title(\"Samples in Netherlands with pH_H2O & OC > Median\")\nax.set_xlim(netherlands_main.total_bounds[0] - 0.5, netherlands_main.total_bounds[2] + 0.5)\nax.set_ylim(netherlands_main.total_bounds[1] - 0.5, netherlands_main.total_bounds[3] + 0.5)\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Plot LUCAS points in Europe where LU_DESC is 'Woodland' and pH_H2O is less than 5.5.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"pH_H2O\"] = pd.to_numeric(df[\"pH_H2O\"], errors=\"coerce\")\nif \"LU_DESC\" not in df.columns and \"LC0_Desc\" in df.columns:\n    df[\"LU_DESC\"] = df[\"LC0_Desc\"]\ndf = df.dropna(subset=[\"LU_DESC\", \"pH_H2O\", \"TH_LONG\", \"TH_LAT\"])\ndf = df[(df[\"LU_DESC\"] == \"Woodland\") & (df[\"pH_H2O\"] < 5.5)]\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\neurope = world[world[\"CONTINENT\"] == \"Europe\"]\nbbox = gdf[gdf[\"Country\"].isin(europe[\"NAME\"])].total_bounds\n\nfig, ax = plt.subplots(figsize=(10, 8))\neurope.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf[gdf[\"Country\"].isin(europe[\"NAME\"])].plot(ax=ax, color=\"darkgreen\", markersize=5, label=\"Woodland & pH_H2O < 5.5\")\nax.set_xlim(bbox[0], bbox[2])\nax.set_ylim(bbox[1], bbox[3])\nax.set_title(\"Woodland Areas in Europe with pH_H2O < 5.5\")\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Show pH_CaCl2 values across Norway, using a color gradient from blue to red.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"pH_CaCl2\"] = pd.to_numeric(df[\"pH_CaCl2\"], errors=\"coerce\")\ndf = df[(df[\"Country\"] == \"Norway\") & df[\"pH_CaCl2\"].notna() & df[\"TH_LAT\"].notna() & df[\"TH_LONG\"].notna()]\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\nnorway = world[world[\"NAME\"] == \"Norway\"].explode(index_parts=True)\nnorway[\"area\"] = norway.geometry.area\nnorway_mainland = norway[norway[\"area\"] > 0.5]\n\nfig, ax = plt.subplots(figsize=(8, 10))\nnorway_mainland.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, column=\"pH_CaCl2\", cmap=\"coolwarm\", markersize=6, legend=True)\nax.set_xlim(norway_mainland.total_bounds[0] - 1, norway_mainland.total_bounds[2] + 1)\nax.set_ylim(norway_mainland.total_bounds[1] - 1, norway_mainland.total_bounds[3] + 1)\nax.set_title(\"pH_CaCl2 in Norway (Color Gradient: Blue to Red)\")\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Visualize all points in Romania with LC0_Desc = 'Shrubland' and OC below 25.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"OC\"] = pd.to_numeric(df[\"OC\"], errors=\"coerce\")\ndf = df[(df[\"Country\"] == \"Romania\") & (df[\"LC0_Desc\"] == \"Shrubland\") & (df[\"OC\"] < 25)]\ndf = df.dropna(subset=[\"TH_LONG\", \"TH_LAT\"])\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\nromania = world[world[\"NAME\"] == \"Romania\"].explode(index_parts=True)\nromania[\"area\"] = romania.geometry.area\nromania_main = romania[romania[\"area\"] > 1]\n\nfig, ax = plt.subplots(figsize=(8, 8))\nromania_main.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, color=\"green\", markersize=6)\nax.set_title(\"Shrubland in Romania with OC < 25\")\nax.set_xlim(romania_main.total_bounds[0] - 0.5, romania_main.total_bounds[2] + 0.5)\nax.set_ylim(romania_main.total_bounds[1] - 0.5, romania_main.total_bounds[3] + 0.5)\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Display Polish points where LC1_Desc is 'Artificial land' and pH_H2O is above 6.5.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\nif \"LC1_Desc\" not in df.columns and \"LC0_Desc\" in df.columns:\n    df[\"LC1_Desc\"] = df[\"LC0_Desc\"]\ndf[\"pH_H2O\"] = pd.to_numeric(df[\"pH_H2O\"], errors=\"coerce\")\ndf = df[(df[\"Country\"] == \"Poland\") & (df[\"LC1_Desc\"] == \"Artificial land\") & (df[\"pH_H2O\"] > 6.5)]\ndf = df.dropna(subset=[\"TH_LONG\", \"TH_LAT\"])\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\npoland = world[world[\"NAME\"] == \"Poland\"].explode(index_parts=True)\npoland[\"area\"] = poland.geometry.area\npoland_main = poland[poland[\"area\"] > 1]\n\nfig, ax = plt.subplots(figsize=(8, 8))\npoland_main.plot(ax=ax, color=\"white\", edgecolor=\"black\")\nif not gdf.empty:\n    gdf.plot(ax=ax, color=\"blue\", markersize=6)\n    ax.set_title(\"Artificial Land in Poland with pH_H2O > 6.5\")\nelse:\n    ax.set_title(\"No matching data for Poland (pH_H2O > 6.5 & LC1_Desc = Artificial land)\")\nax.set_xlim(poland_main.total_bounds[0] - 0.5, poland_main.total_bounds[2] + 0.5)\nax.set_ylim(poland_main.total_bounds[1] - 0.5, poland_main.total_bounds[3] + 0.5)\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Perform KMeans clustering using pH_H2O and OC on samples from Croatia and plot the result.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf = df[df[\"Country\"] == \"Croatia\"]\ndf[\"pH_H2O\"] = pd.to_numeric(df[\"pH_H2O\"], errors=\"coerce\")\ndf[\"OC\"] = pd.to_numeric(df[\"OC\"], errors=\"coerce\")\ndf = df.dropna(subset=[\"TH_LONG\", \"TH_LAT\", \"pH_H2O\", \"OC\"])\n\nX = df[[\"pH_H2O\", \"OC\"]]\nkmeans = KMeans(n_clusters=3, random_state=42, n_init=\"auto\")\ndf[\"cluster\"] = kmeans.fit_predict(X)\n\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\ncroatia = world[world[\"NAME\"] == \"Croatia\"].explode(index_parts=True)\ncroatia[\"area\"] = croatia.geometry.area\ncroatia_main = croatia[croatia[\"area\"] > 0.1]\n\nfig, ax = plt.subplots(figsize=(8, 8))\ncroatia_main.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, column=\"cluster\", cmap=\"tab10\", legend=True, markersize=15)\nax.set_title(\"KMeans Clustering of OC and pH_H2O in Croatia\")\nax.set_xlim(croatia_main.total_bounds[0] - 0.3, croatia_main.total_bounds[2] + 0.3)\nax.set_ylim(croatia_main.total_bounds[1] - 0.3, croatia_main.total_bounds[3] + 0.3)\nplt.tight_layout()\nplt.savefig(\"plot.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Plot all locations in Greece where LU_DESC is 'Permanent crops' and OC is above the European median.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"OC\"] = pd.to_numeric(df[\"OC\"], errors=\"coerce\")\ndf = df[df[\"OC\"].notna()]\nmedian_oc = df[\"OC\"].median()\ndf = df[(df[\"Country\"] == \"Greece\") & (df[\"LU1_Desc\"] == \"Permanent crops\") & (df[\"OC\"] > median_oc)]\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.TH_LONG, df.TH_LAT), crs=\"EPSG:4326\")\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\ngreece = world[world[\"NAME\"] == \"Greece\"]\nfig, ax = plt.subplots(figsize=(8, 8))\ngreece.plot(ax=ax, color=\"white\", edgecolor=\"black\")\nif not gdf.empty:\n    gdf.plot(ax=ax, color=\"red\", markersize=20)\n    bounds = gdf.total_bounds\n    ax.set_xlim(bounds[0] - 0.5, bounds[2] + 0.5)\n    ax.set_ylim(bounds[1] - 0.5, bounds[3] + 0.5)\n    ax.set_title(\"Greece: Permanent Crops with OC > European Median\")\nelse:\n    ax.set_xlim(greece.total_bounds[0] - 0.5, greece.total_bounds[2] + 0.5)\n    ax.set_ylim(greece.total_bounds[1] - 0.5, greece.total_bounds[3] + 0.5)\n    ax.set_title(\"No matching points in Greece (Permanent Crops & OC > European Median)\")\nplt.tight_layout()\nplt.savefig(\"test_case_15_greece_final_fixed.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Plot all points in Europe where 'K' is below its median value.",
    "code": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"K\"] = pd.to_numeric(df[\"K\"], errors=\"coerce\")\ndf = df[df[\"K\"].notna() & df[\"IsInEurope\"] == True]\ndf = df[df[\"K\"] < df[\"K\"].median()]\ndf = df.dropna(subset=[\"TH_LAT\", \"TH_LONG\"])\ngdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\nworld = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:4326\")\neurope = world[world[\"CONTINENT\"] == \"Europe\"].explode(index_parts=True)\neurope[\"area\"] = europe.geometry.area\neurope_mainland = europe[europe[\"area\"] > 1]\nfig, ax = plt.subplots(figsize=(10, 8))\neurope_mainland.plot(ax=ax, color=\"white\", edgecolor=\"black\")\ngdf.plot(ax=ax, color=\"purple\", markersize=5, label=\"K < median\")\nax.set_xlim(gdf.total_bounds[0] - 1, gdf.total_bounds[2] + 1)\nax.set_ylim(gdf.total_bounds[1] - 1, gdf.total_bounds[3] + 1)\nax.set_title(\"K Below Median in Europe (Mainland Only)\")\nplt.legend()\nplt.tight_layout()\nplt.savefig(\"test_case_12_k_below_median_europe.png\", dpi=300)\nplt.show()"
  },
  {
    "question": "Visualize all locations in Norway where both 'K' and 'pH_H2O' are above their 70th percentile.",
    "code": "```python\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"K\"] = pd.to_numeric(df[\"K\"], errors=\"coerce\")\ndf[\"pH_H2O\"] = pd.to_numeric(df[\"pH_H2O\"], errors=\"coerce\")\ndf = df.dropna(subset=[\"K\", \"pH_H2O\", \"TH_LONG\", \"TH_LAT\"])\n\nk_70 = df[\"K\"].quantile(0.7)\nph_70 = df[\"pH_H2O\"].quantile(0.7)\n\ndf = df[(df[\"Country\"] == \"Norway\") & (df[\"K\"] > k_70) & (df[\"pH_H2O\"] > ph_70)]\n\nif df.empty:\n    print(\"No matching points to plot.\")\nelse:\n    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df[\"TH_LONG\"], df[\"TH_LAT\"]), crs=\"EPSG:4326\")\n\n    europe = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(\"EPSG:3857\")\n    norway = europe[europe[\"NAME\"] == \"Norway\"].explode(index_parts=True)\n    norway[\"area\"] = norway.geometry.area\n    norway_main = norway[norway[\"area\"] > 1]\n\n    gdf = gdf.to_crs(\"EPSG:3857\")\n\n    fig, ax = plt.subplots(figsize=(10, 8))\n    norway_main.plot(ax=ax, color=\"white\", edgecolor=\"black\")\n    gdf.plot(ax=ax, color=\"blue\", markersize=20)\n\n    ax.set_title(\"Norway: K and pH_H2O above 70th percentile\")\n    ax.set_xlim(gdf.total_bounds[0] - 20000, gdf.total_bounds[2] + 20000)\n    ax.set_ylim(gdf.total_bounds[1] - 20000, gdf.total_bounds[3] + 20000)\n\n    plt.tight_layout()\n    plt.savefig(\"test_case_15_norway_K_pH_above_70th.png\", dpi=300)\n    plt.show()\n```"
  },
  {
    "question": "Display the top 15% of Nitrogen (N) values within 200 km of Budapest and color the points by LC0_Desc. Mark Budapest.",
    "code": "import pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\ndf = pd.read_csv(\"LUCAS_with_country_info.csv\")\ndf[\"N\"] = pd.to_numeric(df[\"N\"], errors=\"coerce\")\ndf = df.dropna(subset=[\"TH_LAT\", \"TH_LONG\", \"N\", \"LC0_Desc\"])\ngeometry = [Point(xy) for xy in zip(df[\"TH_LONG\"], df[\"TH_LAT\"])]\ngdf = gpd.GeoDataFrame(df, geometry=geometry, crs=\"EPSG:4326\").to_crs(epsg=3035)\nbudapest = gpd.GeoSeries([Point(19.0402, 47.4979)], crs=\"EPSG:4326\").to_crs(epsg=3035)\nbuffer = budapest.buffer(200000).iloc[0]\nthreshold = gdf[\"N\"].quantile(0.85)\ngdf_filtered = gdf[(gdf[\"N\"] > threshold) & (gdf.geometry.within(buffer))]\neurope = gpd.read_file(\"../natural_earth_data/ne_10m_admin_0_countries.shp\").to_crs(epsg=3035)\neurope = europe[europe[\"CONTINENT\"] == \"Europe\"]\nfig, ax = plt.subplots(figsize=(10, 10))\neurope.plot(ax=ax, color=\"white\", edgecolor=\"black\")\nunique_labels = gdf_filtered[\"LC0_Desc\"].unique()\ncmap = cm.get_cmap(\"tab10\", len(unique_labels))\ncolor_dict = {label: cmap(i) for i, label in enumerate(unique_labels)}\ncolors_list = gdf_filtered[\"LC0_Desc\"].map(color_dict)\ngdf_filtered.plot(ax=ax, color=colors_list, markersize=10, marker=\".\")\nfor label in unique_labels:\n    ax.scatter([], [], color=color_dict[label], label=label)\nax.legend(title=\"LC0_Desc\", loc=\"lower left\")\nbounds = gdf_filtered.total_bounds\npad_x = (bounds[2] - bounds[0]) * 0.2\npad_y = (bounds[3] - bounds[1]) * 0.2\nax.set_xlim(bounds[0] - pad_x, bounds[2] + pad_x)\nax.set_ylim(bounds[1] - pad_y, bounds[3] + pad_y)\nax.plot(budapest.geometry.x, budapest.geometry.y, marker=\"*\", color=\"black\", markersize=50)\nax.text(budapest.geometry.x + 10000, budapest.geometry.y + 10000, \"Budapest\", fontsize=10)\nplt.title(\"Top 15% Nitrogen Near Budapest (200 km), Colored by LC0_Desc\")\nplt.tight_layout()\nplt.savefig(\"plots/plot14.png\")\nplt.show()"
  }
]